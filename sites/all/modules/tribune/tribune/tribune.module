<?php

/**
 * @file
 * The core module that manages all common tribune operations
 */

/**
 * Implements hook_node_info().
 */
function tribune_node_info() {
  return array(
    'tribune' => array(
      'base' => 'tribune',
      'name' => t('Tribune'),
      'description' => t('A tribune.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tribune_theme($existing, $type, $theme, $path) {
  return array(
    'tribune' => array(
      'template' => 'tribune',
      'render element' => 'elements',
    ),
    'tribune_posts' => array(
      'template' => 'tribune_posts',
      'render element' => 'elements',
    ),
    'tribune_post' => array(
      'template' => 'tribune-post',
      'variables' => array('post' => NULL, 'node' => NULL),
    ),
  );
}

/**
 * Returns an array containing a 'posts' index with the tribune latest posts and
 * an 'error' index indicating whether there was an error or not retrieving the
 * posts.
 */
function tribune_posts($node, $count, $last_id = 0, $include_moderated = TRUE) {
  $module = _tribune_module($node);
  $info = tribune_info($node);
  if ($info['moderated']) {
    $posts = module_invoke($module, 'tribune_posts', $node, $count, $last_id, $include_moderated);
  } else {
    $posts = module_invoke($module, 'tribune_posts', $node, $count, $last_id);
  }

  foreach (module_implements('tribune_posts_alter') as $module) {
    $func = $module.'_tribune_posts_alter';
    $func($node, $posts);
  }

  $error = FALSE;

  if (is_array($posts)) foreach ($posts as $id => $post) {
    if ($post === NULL) {
      if (!$include_moderated) {
        unset($posts[$id]);
        continue;
      } else {
        $post = array('moderated' => TRUE);
      }
    }

    $post += array(
      'id' => $id,
      'text' => '',
      'info' => '',
      'uid' => '',
      'timestamp' => '',
      'clock_index' => '',
      'moderated' => FALSE,
    );

    $posts[$id] = $post;
  } else {
    // The tribune probably returned an error message,
    if ($posts === NULL) {
      $error = t('Unable to retrieve posts from this tribune.');
    } else {
      $error = $posts;
    }

    $error = t('Tribune !title: ', array('!title' => $node->title)) . $error;
    $posts = array();
  }

  return array('posts' => $posts, 'error' => $error);
}

/**
 * Implements hook_view().
 */
function tribune_view($node, $view_mode = 'full') {
  if (!tribune_access('read tribune', $node)) {
    return drupal_access_denied();
  }

  global $user;

  $count = $node->tribune_display_posts;

  if ($view_mode == 'full') {
    $return = tribune_posts($node, $count, 0, FALSE);

    if ($return['error']) {
      drupal_set_message($return['error'], 'error');
    }

    $node->content['tribune'] = array(
      '#theme' => 'tribune',
      '#posts' => $return['posts'],
      '#error' => $return['error'],
      '#node' => $node,
    );
  } else if ($view_mode == 'teaser') {
    $count = 5;

    $return = tribune_posts($node, $count, 0, FALSE);

    if ($return['error']) {
      drupal_set_message($return['error'], 'error');
    }

    $node->content['tribune'] = array(
      '#theme' => 'tribune',
      '#posts' => $return['posts'],
      '#error' => $return['error'],
      '#node' => $node,
    );
  }

  drupal_add_html_head_link(array(
    'type' => 'application/xml',
    'href' => url('node/' . $node->nid . '/config.xml', array('absolute' => TRUE)),
    'rel' => 'tribune configuration',
  ));
  drupal_add_css(drupal_get_path('module', 'tribune') . '/tribune.css');
  drupal_add_js(drupal_get_path('module', 'tribune') . '/tribune.js');
  drupal_add_js(array(
    'tribune' => array(
      // Have to use a string index with alphabetic characters or
      // this will be output as a numerically indexed js array.
      'tribune-'.$node->nid => array(
        'uid' => $user->uid,
        'count' => $count,
        'reloadurl' => url('node/' . $node->nid . '/json'),
        'posturl' => url('node/' . $node->nid . '/post'),
        'controlurl' => url('node/' . $node->nid . '/control/' . drupal_get_token()),
        'referencesearchurl' => url('node/' . $node->nid . '/reference-search'),
        'permissions' => array(
          'mod' => tribune_access('moderate tribune', $node),
          'write' => tribune_access('post in tribune', $node),
          'read' => tribune_access('read tribune', $node),
        ),
        'favicon_notification' => !!$node->tribune_favicon_notification,
        'favicons' => array(
          'answer' => url(drupal_get_path('module', 'tribune') .'/images/answer.ico', array('absolute' => TRUE)),
          'new_post' => url(drupal_get_path('module', 'tribune') .'/images/newpost.ico', array('absolute' => TRUE)),
        ),
      ),
    ),
  ), 'setting');

  return $node;
}

/**
 * Creates posting form.
 */
function _tribune_post_form($form, &$form_state, $node) {
  $info = tribune_info($node);

  return array(
    '#access' => tribune_access('post in tribune', $node),
    '#attributes' => array(
      'class' => array(
        'tribune-post-form',
      ),
    ),

    'nid' => array(
      '#type' => 'value',
      '#value' => $node->nid,
    ),
    'palmipede' => array(
      '#type' => 'fieldset',
      'message' => array(
        '#type' => 'textfield',
        '#maxlength' => $info['max_length'],
      ),
      'tribune-email' => array(
        '#type' => 'textfield',
        '#default_value' => '',
        '#description' => 'Please leave this field empty: it is only here to confuse spambots, and you should not even see it. If you <em>do</em> see it, there is probably a CSS problem somewhere and you should contact the website administrator.',
        '#attributes' => array('class' => array('tribune-email-field')),
        // I'll leave this untranslated because it shouldn't appear, anyway
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => 'Post',
      ),
    ),
    '#submit' => array('_tribune_post_form_submit'),
  );
}

/**
 * Handles form submission.
 */
function _tribune_post_form_submit($form, &$form_state) {
  if (empty($form_state['values']['tribune-email'])) {
    tribune_post(node_load($form_state['values']['nid']), $form_state['values']['message']);
  }
}

/**
 * Handles message posting.
 */
function tribune_post($node, $message) {
  if ($message) {
    $module = _tribune_module($node);
    global $user;
    $timestamp = date('YmdHis', REQUEST_TIME);
    $info = $_SERVER['HTTP_USER_AGENT'];

    foreach (module_implements('tribune_before_post') as $module) {
      $func = $module.'_tribune_before_post';
      $func($node, $message, $user, $timestamp, $info);
    }

    $return = module_invoke($module, 'tribune_post', $node, $message, $user, $timestamp, $info);

    if ($post = $return['post']) {
      $modules = module_implements('tribune_after_post');
      if (count($modules)) {
        foreach ($modules as $module) {
          $func = $module.'_tribune_after_post';
          $func($node, $post);
        }
      }
    }

    $url = url('node/' . $node->nid, array('absolute' => TRUE));
    cache_clear_all($url, 'cache_page', '*');

    return $return;
  } else {
    return array();
  }
}

/**
 * Handles message posting from a remote client (AJAX or coincoins)
 */
function tribune_post_from_client($node) {
  if (isset($_POST['message'])) {
    $ret = tribune_post($node, $_POST['message']);

    if (isset($ret['post_id'])) {
      drupal_add_http_header('X-Post-Id', $ret['post_id']);
    }

    if (!empty($_SERVER['HTTP_ACCEPT'])) {
      // If the client explicitely accepts XML, we'll send it the backend in response
      // same if it accepts JSON, but we'll assume */* is more of a default setting
      // for browsers and isn't really asking for that.
      if (strpos($_SERVER['HTTP_ACCEPT'], 'application/xml') !== FALSE) {
       //or strpos($_SERVER['HTTP_ACCEPT'], 'text/xml') !== FALSE) {
        // Since many wmCoinCoin users post with a custom user-agent, I just
        // can't send XML even when text/xml is supposed to be accepted.

        // STUPID STUPID STUPID STUPID
        // Why would you say you accept text/xml and throw an error when you
        // actually receive XML? Retarded client.
        if (strpos($_SERVER['HTTP_USER_AGENT'], 'wmCoinCoin') === FALSE) {
          tribune_deliver_xml(tribune_xml($node));
        }
      } else if (strpos($_SERVER['HTTP_ACCEPT'], 'application/json') !== FALSE) {
        tribune_json_posts($node);
      }
    }
  }

  exit();
}

/**
 * Process variables for tribune.tpl.php.
 *
 * @see tribune.tpl.php
 */
function template_preprocess_tribune(&$variables) {
  $variables['posts'] = '';

  foreach (array_reverse($variables['elements']['#posts']) as $post) {
    if (!is_array($post)) {
      $post = (array)$post;
    }

    if ($post['moderated']) {
      continue;
    }

    $post = array(
      '#theme' => 'tribune_post',
      '#post' => $post,
      '#node' => $variables['elements']['#node'],
    );
    $variables['posts'] .= drupal_render($post);
  }

  $variables['node'] = $variables['elements']['#node'];
  $variables['tribune_type'] = $variables['elements']['#node']->tribune_type;

  if (!tribune_access('post in tribune', $variables['elements']['#node'])) {
    $variables['form'] = '';
  } else if (isset($variables['elements']['#read-only']) and $variables['elements']['#read-only']) {
    $variables['form'] = '';
  } else {
    $form = drupal_get_form('_tribune_post_form', $variables['node']);
    $variables['form'] = drupal_render($form);
  }

  if (isset($variables['elements']['#page'])) {
    $variables['page'] = $variables['elements']['#page'];
  } else {
    $variables['page'] = '';
  }
}

/**
 * Process variables for tribune-post.tpl.php.
 *
 * @see tribune-post.tpl.php
 */
function template_preprocess_tribune_post(&$variables) {
  $variables['post']['prefix'] = '';
  $variables['post']['suffix'] = '';
  if ($variables['post']['uid'] && $user = user_load($variables['post']['uid'])) {
    $variables['post']['username'] = $user->name;
  } else if (isset($variables['post']['username']) and $variables['post']['username']) {
    $variables['post']['username'] = $variables['post']['username'];
  } else {
    if ($variables['node']->tribune_show_useragent) {
      $variables['post']['username'] = '';
      $variables['post']['mini-info'] = tribune_reduce_info($variables['post']['info']);
    } else {
      $variables['post']['username'] = t('Anonymous');
    }
  }
  $date = DateTime::createFromFormat('YmdHis', $variables['post']['timestamp']);
  $variables['post']['clock'] = $date->format('H:i:s');
  $variables['post']['unixtimestamp'] = $date->format('U');

  foreach (module_implements('tribune_post_alter') as $module) {
    $func = $module.'_tribune_post_alter';
    $func($variables['node'], $variables['post']);
  }
}

/**
 * Returns all types provided by installed modules.
 */
function tribune_types() {
  return module_invoke_all('tribune_types');
}

/**
 * Implements hook_form().
 */
function tribune_form($node, &$form_state) {
  $options = array();
  foreach (tribune_types() as $type => $info) {
    $options[$type] = $info['title'];
  }

  if (empty($options)) {
    drupal_set_message(t('You need to enable at least one tribune provider module.'), 'error');
  }

  $type = node_type_get_type($node);

  $form = array(
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'title' => array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
    ),
    'tribune' => array(
      '#type' => 'fieldset',
      '#title' => t('Tribune settings'),
      'tribune_display_posts' => array(
        '#type' => 'textfield',
        '#title' => t('Posts shown'),
        '#description' => t('Number of posts displayed on the tribune page.'),
        '#required' => TRUE,
        '#default_value' => isset($node->tribune_display_posts) ? $node->tribune_display_posts : 20,
      ),
      'tribune_favicon_notification' => array(
        '#type' => 'checkbox',
        '#title' => t('Favicon notification'),
        '#description' => t('Use a special favicon to show when a new message has been posted.'),
        '#default_value' => isset($node->tribune_favicon_notification) ? $node->tribune_favicon_notification : TRUE,
      ),
      'tribune_show_useragent' => array(
        '#type' => 'checkbox',
        '#title' => t('Show user-agent'),
        '#description' => t('Displays anonymous user user-agent (Firefox, IE9, Safari...) instead of just "Anonymous" to make it easier to identify different anonymous users.'),
        '#default_value' => isset($node->tribune_show_useragent) ? $node->tribune_show_useragent : FALSE,
      ),
      'tribune_type' => array(
        '#type' => 'radios',
        '#title' => t('Type'),
        '#options' => $options,
        '#default_value' => isset($node->tribune_type) ? $node->tribune_type : FALSE,
        '#required' => TRUE,
        '#ajax' => array(
          'callback' => 'tribune_type_form',
          'wrapper' => 'tribune-type-ajax-wrapper',
        ),
      ),
      'settings' => array(
        '#markup' => '<div id="tribune-type-ajax-wrapper"></div>',
      ),
    ),
  );


  $tribune_type = NULL;
  if (!empty($form_state['values']['tribune_type'])) {
    $tribune_type = $form_state['values']['tribune_type'];
  }
  if (isset($node->tribune_type)) {
    $tribune_type = $node->tribune_type;
    $form['tribune']['tribune_type']['#disabled'] = TRUE;
    $form['tribune']['tribune_type']['#description'] = t('You cannot change the type of a tribune after its creation.');
  }

  $form['tribune']['settings'] = array();
  foreach (module_implements('tribune_form') as $module) {
    $func = $module.'_tribune_form';
    if ($result = $func($node, $form_state) and is_array($result)) {
      $form['tribune']['settings'] = array_merge($form['tribune']['settings'], $result);
    }
  }

  $form['tribune']['settings']['#prefix'] = '<div id="tribune-type-ajax-wrapper">';
  $form['tribune']['settings']['#suffix'] = '</div>';

  return $form;
}

/**
 * Implements hook_load().
 */
function tribune_load($nodes) {
  $types = tribune_types();
  $nodes_by_module = array();
  $result = db_select('tribunes')
    ->fields('tribunes')
    ->condition('nid', array_keys($nodes))
    ->execute()
    ->fetchAllAssoc('nid');
  foreach ($result as $record) {
    $custom_access = $record->custom_access ? unserialize($record->custom_access) : array();
    foreach ($custom_access as $uid => $perms) {
      if (!isset($perms['mod'])) $custom_access[$uid]['mod'] = 0;
      if (!isset($perms['write'])) $custom_access[$uid]['write'] = 0;
      if (!isset($perms['read'])) $custom_access[$uid]['read'] = 0;
      if (!isset($perms['banned'])) $custom_access[$uid]['banned'] = 0;
    }
    $nodes[$record->nid]->tribune_type = $record->type;
    $nodes[$record->nid]->tribune_display_posts = $record->display_posts;
    $nodes[$record->nid]->tribune_favicon_notification = $record->favicon_notification;
    $nodes[$record->nid]->tribune_show_useragent = $record->show_useragent;
    $nodes[$record->nid]->tribune_permissions = array(
      'mod' => $record->mod_access,
      'write' => $record->write_access,
      'read' => $record->read_access,
      'custom' => $custom_access,
    );

    $module = $types[$record->type]['module'];

    if (!isset($nodes_by_module[$module])) {
      $nodes_by_module[$module] = array();
    }
    $nodes_by_module[$module][$record->nid] = $nodes[$record->nid];
  }

  foreach ($nodes_by_module as $module => $nodes) {
    $function = $module . '_load';
    if (function_exists($function)) {
      $function($nodes);
    }
  }
}

/**
 * Implements hook_insert().
 */
function tribune_insert($node) {
  db_insert('tribunes')
    ->fields(array(
      'nid' => $node->nid,
      'type' => $node->tribune_type,
      'display_posts' => (int)$node->tribune_display_posts,
      'favicon_notification' => (int)$node->tribune_favicon_notification,
      'show_useragent' => (int)$node->tribune_show_useragent,
      'mod_access' => 'owner',
      'write_access' => 'all',
      'read_access' => 'all',
      'custom_access' => serialize(array()),
    ))
    ->execute();

  $module = _tribune_module($node);
  $posts = module_invoke($module, 'tribune_insert', $node);
}

/**
 * Implements hook_update().
 */
function tribune_update($node) {
  db_update('tribunes')
    ->fields(array(
      'nid' => $node->nid,
      'type' => $node->tribune_type,
      'display_posts' => (int)$node->tribune_display_posts,
      'favicon_notification' => (int)$node->tribune_favicon_notification,
      'show_useragent' => (int)$node->tribune_show_useragent,
      'mod_access' => $node->tribune_permissions['mod'],
      'write_access' => $node->tribune_permissions['write'],
      'read_access' => $node->tribune_permissions['read'],
      'custom_access' => serialize($node->tribune_permissions['custom']),
    ))
    ->condition('nid', $node->nid)
    ->execute();

  $module = _tribune_module($node);
  $posts = module_invoke($module, 'tribune_update', $node);
}

/**
 * Implements hook_delete().
 */
function tribune_delete($node) {
  db_delete('tribunes')
    ->condition('nid', $node->nid)
    ->execute();

  $module = _tribune_module($node);
  $posts = module_invoke($module, 'tribune_delete', $node);
}

/**
 * Implements hook_menu().
 */
function tribune_menu() {
  return array(
    'node/%tribune_menu/access' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => t('Access'),
      'page callback' => 'tribune_access_page',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('change permissions', 1),
    ),
    'node/%tribune_menu/xml' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'tribune_deliver_xml',
      'page callback' => 'tribune_xml',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
    ),
    'node/%tribune_menu/config.xml' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'tribune_deliver_xml',
      'page callback' => 'tribune_config',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
    ),
    'node/%tribune_menu/json' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_json_posts',
      'theme callback' => 'ajax_base_page_theme',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
    ),
    'node/%tribune_menu/reference-search' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_json_reference_search',
      'theme callback' => 'ajax_base_page_theme',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
    ),
    'node/%tribune_menu/post' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_post_from_client',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('post in tribune', 1),
    ),
    'node/%tribune_menu/control/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_control',
      'page arguments' => array(1, 3),
      'access callback' => 'tribune_access',
      'access arguments' => array('moderate tribune', 1),
    ),
  );
}

/**
 * Ajax callback for controling several aspects of a tribune
 * for moderators
 */
function tribune_control($tribune, $token) {
  if (drupal_valid_token($token) and isset($_REQUEST['delete'])) {
    $info = tribune_info($tribune);
    if (tribune_access('moderate tribune', $tribune) and $info['moderated']) {
      $post_id = $_REQUEST['delete'];
      $module = _tribune_module($tribune);
      $info = module_invoke($module, 'tribune_delete_post', $tribune, $post_id);
    }
  }
}

/**
 * Configuration page for defining user access for one tribune
 */
function tribune_access_page($tribune) {
  return drupal_get_form('_tribune_access_page_form', $tribune);
}

function _tribune_access_page_form($form, $form_state, $tribune) {
  $form = array(
    'tribune' => array(
      '#type' => 'value',
      '#value' => $tribune,
    ),
    'read' => array(
      '#type' => 'fieldset',
      '#title' => t('Read access'),
      '#tree' => TRUE,

      'type' => array(
        '#type' => 'radios',
        '#default_value' => $tribune->tribune_permissions['read'],
        '#options' => array(
          'all' => t('All users'),
          'registered' => t('Authenticated users'),
          'owner' => t('Owner only'),
          'nobody' => t('Nobody'),
        ),
      ),
    ),
    'write' => array(
      '#type' => 'fieldset',
      '#title' => t('Write access'),
      '#tree' => TRUE,

      'type' => array(
        '#type' => 'radios',
        '#default_value' => $tribune->tribune_permissions['write'],
        '#options' => array(
          'all' => t('All users'),
          'registered' => t('Authenticated users'),
          'owner' => t('Owner only'),
          'nobody' => t('Nobody'),
        ),
      ),
    ),
    'custom' => array(
      '#type' => 'fieldset',
      '#title' => t('Custom access rights'),
      '#description' => t('Here you can define custom access rights for users.<br />
        These rights override the settings you might have chosen before, ie. if nobody has the right
        to post in this tribune, you can still choose to allow it for some users in this section.'),
      '#tree' => TRUE,

      'users' => array(
        '#type' => 'item',
        '#title' => t('Add custom access rights for user:'),

        'new' => array(
          '#type' => 'textfield',
          '#autocomplete_path' => 'user/autocomplete',
          '#ajax' => array(
            'callback' => 'tribune_access_add_user',
            'wrapper' => 'tribune_access_users_wrapper',
            'method' => 'append',
            'effect' => 'fade',
          ),
        ),
        'ajax-wrapper' => array(
          '#markup' => '<div id="tribune_access_users_wrapper"></div>',
        ),
      ),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#submit' => array('_tribune_access_page_form_submit'),
    ),
  );

  $info = tribune_info($tribune);

  foreach ($tribune->tribune_permissions['custom'] as $uid => $permissions) {
    $user = user_load($uid)->name;
    $form['custom']['users'][$user] = array(
      '#name' => 'custom[users]['.$user.']',
      '#title' => t('Custom access rights for user: !name', array('!name' => $user)),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'mod' => array(
        '#type' => 'checkbox',
        '#title' => t('moderation'),
        '#name' => 'custom[users]['.$user.'][mod]',
        '#default_value' => $permissions['mod'],
      ),
      'write' => array(
        '#type' => 'checkbox',
        '#title' => t('write'),
        '#name' => 'custom[users]['.$user.'][write]',
        '#default_value' => $permissions['write'],
      ),
      'read' => array(
        '#type' => 'checkbox',
        '#title' => t('read'),
        '#name' => 'custom[users]['.$user.'][read]',
        '#default_value' => $permissions['read'],
      ),
      'banned' => array(
        '#type' => 'checkbox',
        '#title' => t('ban this user'),
        '#name' => 'custom[users]['.$user.'][banned]',
        '#default_value' => $permissions['banned'],
      ),
      'remove' => array(
        '#type' => 'submit',
        '#value' => t('Remove any special access for this user.'),
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'tribune') . '/tribune-admin.js'),
        ),
      ),
    );

    if (!$info['moderated']) {
      unset($form['custom']['users'][$user]['mod']);
    }
  }

  return $form;
}

function tribune_access_add_user($form, $form_state) {
  $user = $form_state['values']['custom']['users']['new'];
  $tribune = $form_state['values']['tribune'];

  $info = tribune_info($tribune);

  if ($user) {
    $form = array(
      '#name' => 'custom[users]['.$user.']',
      '#title' => t('Custom access rights for user: !name', array('!name' => $user)),
      '#type' => 'fieldset',
      'mod' => array(
        '#type' => 'checkbox',
        '#title' => t('moderation'),
        '#name' => 'custom[users]['.$user.'][mod]',
      ),
      'write' => array(
        '#type' => 'checkbox',
        '#title' => t('write'),
        '#name' => 'custom[users]['.$user.'][write]',
        '#default_value' => 1,
        '#attributes' => array('checked' => 'checked'),
      ),
      'read' => array(
        '#type' => 'checkbox',
        '#title' => t('read'),
        '#name' => 'custom[users]['.$user.'][read]',
        '#default_value' => 1,
        '#attributes' => array('checked' => 'checked'),
      ),
      'banned' => array(
        '#type' => 'checkbox',
        '#title' => t('ban this user'),
        '#name' => 'custom[users]['.$user.'][banned]',
        '#default_value' => 0,
      ),
    );

    if (!$info['moderated']) {
      unset($form['mod']);
    }

    return $form;
  }
}

function _tribune_access_page_form_submit($form, $form_state) {
  $custom_permissions = array();
  foreach ($form_state['input']['custom']['users'] as $user => $permissions) {
    $empty = TRUE;
    if (is_array($permissions)) foreach ($permissions as $perm) {
      if ($perm) {
        $empty = FALSE;
      }
    }
    if (!$empty and $user != 'new') {
      $uid = user_load_by_name($user)->uid;

      if ($uid) {
        $custom_permissions[$uid] = $permissions;
      }
    }
  }
  $tribune = $form_state['values']['tribune'];
  $tribune->tribune_permissions = array(
    'mod' => 'owner',
    'write' => $form_state['values']['write']['type'],
    'read' => $form_state['values']['read']['type'],
    'custom' => $custom_permissions,
  );
  tribune_update($tribune);
}

/**
 * Access callback for tribune permissions
 */
function tribune_access($permission, $tribune, $user = NULL) {
  if ($user === NULL) {
    global $user;
  }

  if (!user_access('access content')) {
    return FALSE;
  }

  switch ($permission) {
    case 'change permissions':
      return $tribune->uid and $tribune->uid == $user->uid;
    case 'read tribune':
      if ($tribune->uid and $tribune->uid == $user->uid) {
        return true;
      } else if (isset($tribune->tribune_permissions['custom'][$user->uid])) {
        $perms = $tribune->tribune_permissions['custom'][$user->uid];
        return !$perms['banned'] && $perms['read'];
      } else if ($user->uid == 0) {
        return in_array($tribune->tribune_permissions['read'], array('all'));
      } else {
        return in_array($tribune->tribune_permissions['read'], array('all', 'registered'));
      }
    case 'post in tribune':
      if ($tribune->uid and $tribune->uid == $user->uid) {
        return true;
      } else if (isset($tribune->tribune_permissions['custom'][$user->uid])) {
        $perms = $tribune->tribune_permissions['custom'][$user->uid];
        return !$perms['banned'] && $perms['write'];
      } else if ($user->uid == 0) {
        return in_array($tribune->tribune_permissions['write'], array('all'));
      } else {
        return in_array($tribune->tribune_permissions['write'], array('all', 'registered'));
      }
    case 'moderate tribune':
      $info = tribune_info($tribune);
      if ($info) {
        if ($tribune->uid and $tribune->uid == $user->uid) {
          return true;
        } else if (isset($tribune->tribune_permissions['custom'][$user->uid])) {
          $perms = $tribune->tribune_permissions['custom'][$user->uid];
          return !$perms['banned'] && $perms['mod'];
        }
      }
    default:
      return FALSE;
  }
}

/**
 * Sends a tribune's posts in JSON format
 */
function tribune_json_posts($tribune) {
  $GLOBALS['conf']['cache'] = FALSE;
  $count = 10;

  $posts = array('posts' => array(), 'moderated' => array());

  $last_id = 0;
  foreach (array('last', 'last_id') as $parameter) {
    if (isset($_REQUEST[$parameter])) {$last_id = (int)$_REQUEST[$parameter]; break;}
  }

  $return = tribune_posts($tribune, $count, $last_id);
  foreach (array_reverse($return['posts']) as $post) {
    if ($post['moderated']) {
      $posts['moderated'][] = $post['id'];
    } else {
      $posts['posts'][$post['id']] = theme('tribune_post', array('post' => $post, 'node' => $tribune));
    }
  }

  if ($return['error']) {
    $posts['error'] = $return['error'];
  }

  drupal_json_output($posts);
}

/**
 * Sends a post matching a clock in JSON format
 */
function tribune_json_reference_search($tribune) {
  $timestamp = $_REQUEST['timestamp'];
  $post_id = $_REQUEST['from'];

  $module = _tribune_module($tribune);
  $result = module_invoke($module, 'tribune_reference', $tribune, $timestamp, $post_id);

  $posts = array();
  if ($result) foreach ($result as $post) {
    if ($post['moderated']) {
      $posts['moderated'][] = $post['id'];
    } else {
      $posts['posts'][$post['id']] = theme('tribune_post', array('post' => $post, 'node' => $tribune));
    }
  }

  drupal_json_output($posts);
}

/**
 * Returns a tribune's configuration information in XML format
 */
function tribune_config($tribune) {
  if (!$tribune) {
    header('HTTP/1.0 403 Access denied');
    exit();
  }

  $info = tribune_info($tribune);

  $xml  = sprintf("<site name='%s' title='%s' baseurl='%s' version='1.0'>\n", $info['machine_name'], $info['title'], $info['url']);
  $xml .= sprintf("\t<board name='board' title='Tribune'>\n");
  $xml .= sprintf("\t\t<backend path='%s' public='%s' tags_encoded='false' refresh='%s' />\n", url('node/' . $tribune->nid . '/xml', array('absolute' => TRUE)), tribune_access('read tribune', $tribune, user_load(0)) ? 'true' : 'false', $info['reload_rate']);
  $xml .= sprintf("\t\t<post method='post' path='%s' anonymous='%s' max_length='%s'>\n", url('node/' . $tribune->nid . '/post', array('absolute' => TRUE)), tribune_access('post in tribune', $tribune, user_load(0)) ? 'true' : 'false', $info['max_length']);
  $xml .= sprintf("\t\t\t<field name='message'>\$m</field>\n");
  $xml .= sprintf("\t\t</post>\n");
  $xml .= sprintf("\t</board>\n");
  $xml .= sprintf("</site>\n");

  return $xml;
}

/**
 * Returns information on a trbune
 */
function tribune_info($node) {
  if (!isset($node->tribune_info)) {
    $module = _tribune_module($node);
    $info = module_invoke($module, 'tribune_info', $node);

    if (!$info) {
      $info = array();
    }

    $node->tribune_info = $info + array(
      'title' => $node->title,
      'machine_name' => preg_replace('/[^a-z-0-9]/', '_', strtolower($node->title)),
      'max_length' => '256',
      'reload_rate' => 30,
      'url' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'moderated' => FALSE,
    );
  }

  return $node->tribune_info;
}

/**
 * Retrieves the latest posts and returns them in XML format
 */
function tribune_xml($tribune) {
  if (!$tribune) {
    header('HTTP/1.0 403 Access denied');
    exit();
  }

  $count = $tribune->tribune_display_posts;

  $last_id = 0;
  foreach (array('last', 'last_id') as $parameter) {
    if (isset($_REQUEST[$parameter])) {$last_id = (int)$_REQUEST[$parameter]; break;}
  }

  $xml  = sprintf("<!DOCTYPE board PUBLIC \"C01N C01N !\" \"http://phplop.org/dtd/tribune-1.0.dtd\">\n");
  $xml .= sprintf("<board site=\"%s\">\n", url('node/' . $tribune->nid, array('absolute' => TRUE)));
  $return = tribune_posts($tribune, $count, $last_id, FALSE);
  foreach ($return['posts'] as $post_id => $post) {
    if ($post['moderated']) {
      continue;
    }

    $user = user_load($post['uid']);

    if ($user && $user->name) {
      $login = $user->name;
    } else if (!empty($post['username'])) {
      $login = $post['username'];
    } else {
      $login = '';
    }

    $xml .= sprintf("\t<post id=\"%s\" time=\"%s\">\n\t\t<info>%s</info>\n\t\t<login>%s</login>\n\t\t<message>%s</message>\n\t</post>\n",
        $post_id,
        $post['timestamp'],
        htmlspecialchars($post['info']),
        $login,
        $post['text']);
  }
  $xml .= sprintf("</board>\n");

  return $xml;
}

/**
 * Sends an XML formatted document
 */
function tribune_deliver_xml($xml) {
  drupal_add_http_header('Content-Type', 'text/xml');
  printf("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  print $xml;
}

/**
 * Returns form elements for use in tribune settings forms.
 */
function tribune_type_form($form, $form_state) {
  return $form['tribune']['settings'];
}

/**
 * Helper for building the type-specific settings form.
 */
function _tribune_type_form($form, $form_state, $module, $node) {
  return module_invoke($module, 'tribune_form', $node, $form_state);
}

/**
 * Returns the module that handles a tribune type.
 *
 * @param $type Can be either a "tribune_type" or a node object.
 * @return Name of the module that handles the given type.
 */
function _tribune_module($type) {
  if (is_object($type)) {
    $type = $type->tribune_type;
  }
  $types = tribune_types();
  return $types[$type]['module'];
}

/**
 * Handles menu wildcards
 */
function tribune_menu_load($nid) {
  $node = node_load($nid);

  return $node && $node->type == 'tribune' ? $node : FALSE;
}

/**
  * Reduce an user agent to a smaller yet still meaningful string
  * Simple regular expressions
  */
function tribune_reduce_info($info, $length = 11) {
  $replacements = array(
    "Mozilla/5.0.*Linux.*Firefox/([0-9]\.[0-9]).*" => "FF$1/Lnx",
    "Mozilla/5.0.*OS X.*Firefox/([0-9]\.[0-9]).*" => "FF$1/OSX",
    "Mozilla/5.0.*NT 5.1.*Firefox/([0-9]\.[0-9]).*" => "FF$1/WinXP",
    "Mozilla/5.0.*Windows.*Firefox/([0-9]\.[0-9]).*" => "FF$1/Win",
    "Mozilla/5.0.* Gecko/.* ([\pL]*)/([0-9\.]*).*" => "$1$2",
    "Mozilla/5.0.*Linux.*rv:([0-9\.])+.*" => "Moz$1/Lnx",
    "Mozilla/5.0.*OS X.*rv:([0-9\.])+.*" => "Moz$1/OSX",
    "Mozilla/5.0.*NT 5.1.*rv:([0-9\.])+.*" => "Moz$1/WinXP",
    "Mozilla/5.0.*Windows.*rv:([0-9\.])+.*" => "Moz$1/Win",
    "Opera/([0-9\.]+).*Linux.*" => "Op$1/Linux",
    "Opera/([0-9\.]+).*OS X.*" => "Op$1/OSX",
    "Opera/([0-9\.]+).*NT 5.1.*" => "Op$1/WinXP",
    "Opera/([0-9\.]+).*Windows.*" => "Op$1/Win",
    "py[Cc]\w*[/ ]?([0-9]\.[0-9]+\w*).*" => "pycc$1",
    "wm[Cc]\w*[/ ]?([0-9]\.[0-9]+\w*).*" => "wmcc$1",
    "[Cc]\#oin[Cc]\#oin[/ ]?([0-9\.]+).*" => "C#C#$1",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT 5.1.*" => "IE$1/WinXP",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT 6.0.*" => "IE$1/Vista",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT 6.1.*" => "IE$1/Win7",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT ([0-9\.]+).*" => "IE$1/NT$2",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*" => "IE$1/Win",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT 5.1.*" => "IE$1/WinXP",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT 6.0.*" => "IE$1/Vista",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT 6.1.*" => "IE$1/Win7",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT ([0-9\.]+).*" => "IE$1/NT$2",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*" => "IE$1/Win",
    "Mozilla/5.0.*OS X.*Version/([0-9\.]+).*Safari.*" => "Saf$1/OSX",
    "Mozilla/5.0.*NT 5.1.*Version/([0-9\.]+).*Safari.*" => "Saf$1/WinXP",
    "Mozilla/5.0.*Windows.*Version/([0-9\.]+).*Safari.*" => "Saf$1/Win",
    "Mozilla/5.0.*PPC.*OS X.*Safari.*" => "Saf/OSXPPC",
    "Mozilla/5.0.*Intel.*OS X.*Safari.*" => "Saf/OSXIntel",
    "Mozilla/5.0.*Intel.*OS X.*Safari.*" => "Saf/OSXIntel",
    "Konqueror.*KHTML/([0-9\.]+).*" => "Konq$1/Lnx",
    "Mozilla/5.1.* Gecko/20060425 SUSE/1.5.0.3-7 Firefox/1.5.0.3.*" => "hv3/Lnx",
    ".*Linux.*Chrome/([0-9]+\.[0-9]+).*" => "Chrome$1/Lnx",
    ".*Win.*Chrome/([0-9]+\.[0-9]+).*" => "Chrome$1/Win",
  );

  $changed = FALSE;

  foreach ($replacements as $pattern => $replacement) {
    $pattern = str_replace('@', '\@', $pattern);
    $new_info = preg_replace("@". $pattern ."@u", $replacement, $info);

    if ($new_info != $info) {
      $changed = TRUE;
      $info = $new_info;
    }
  }

  if (!$changed) {
    $info = html_entity_decode($info, ENT_QUOTES, "UTF-8");
    $info = htmlspecialchars(substr($info, 0, $length));
  }

  return trim($info);
}

